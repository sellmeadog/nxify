import React from 'react';
import { render } from '@testing-library/react';

import { ArticleContent, ArticleContentQueryFragment } from './article-content';
import { makeFragmentData } from '../../generated';
import { ArticleContentQueryFragmentFragment } from '../../generated/graphql';

describe('ArticleContent', () => {
  it('should render successfully', () => {
    const fragment = makeFragmentData(CONTENT, ArticleContentQueryFragment);
    const { baseElement } = render(<ArticleContent data={fragment} />);
    expect(baseElement).toMatchSnapshot();
  });
});

const CONTENT: ArticleContentQueryFragmentFragment = {
  __typename: 'Query',
  article: {
    __typename: 'Article',
    ' $fragmentRefs': {
      ArticleAuthorFragmentFragment: {
        __typename: 'Article',
        author: {
          __typename: 'Author',
          name: 'Kennie Davis',
          avatar: {
            url: 'https://media.graphassets.com/mIH7lhHRTEiQU18HLARU',
          },
          biography:
            "An Arizona native, father of three, and software engineer passionate about Nx, React, GraphQL and improving both the developer and user experience. I write about what I'm working on and learning along the way.",
        },
      },
      ArticleHeroFragmentFragment: {
        __typename: 'Article',
        createdAt: '2023-08-20T21:56:31.683674+00:00',
        hero: {
          __typename: 'HeroSection',
          caption:
            'ESLint flags the Expo StatusBar `style` prop by default; the `react/style-prop-object` lint rule offers an easy configuration option to clear this warning.',
          image: null,
          subtitle: '',
          title:
            'Quick Tip: Configure ESLint to Allow the Expo StatusBar "style" Prop',
        },
      },
      ArticleMarkdownFragmentFragment: {
        __typename: 'Article',
        markdown:
          'I recently started an Expo project in my Nx workspace. Unlike the Expo CLI, the [@nx/expo](https://nx.dev/packages/expo) plugin generates projects completely configured with ESLint and Prettier our of the box. As such, the `style` prop error I encountered may not be very common.\n\n> If you\'re not familiar with Nx or how it can streamline your overall development efforts, stay tuned as I will be providing a lot more information about Nx and monorepo development strategies in future articles.\n\nThe [expo-status-bar package](https://docs.expo.dev/versions/latest/sdk/status-bar/) is automatically included in the app generated by Nx and I was confused when I received the following lint warning the first time I set the `style` prop on the `StatusBar`.\n\n```jsx\n// warn: Style prop value must be an object eslint(react/style-prop-object)\n<StatusBar style="light" animated />\n```\n\nFirst, I\'m still not sure why the Expo team deviated from the standard `barStyle` prop name as that would have avoided the linting error altogether. Thankfully, for anyone who has encountered this lint error, the [react/style-prop-object](https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/style-prop-object.md) rule offers a convenient `allow` option that clears the warning:\n\n```json\n"react/style-prop-object": [\n  "warn",\n  {\n    "allow": ["StatusBar"]\n  }\n]\n```\n\nI added this override to the `.eslintrc.json` at the root of my Nx workspace although you could choose to configure only the specific projects that require it. My (almost) complete configuration looks like this:\n\n```json\n{\n  "root": true,\n  "ignorePatterns": ["**/*"],\n  "plugins": ["@nx"],\n  "overrides": [\n    {\n      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],\n      "rules": {\n        ...\n        "react/style-prop-object": [\n          "warn",\n          {\n            "allow": ["StatusBar"]\n          }\n        ]\n      }\n    },\n    ...\n  ]\n}\n```\n\nIf you\'re not using Nx, your ESLint configuration may look a little different although the same concept should apply. If you\'re not using a linter, you should consider taking the time to configure ESLint or similar in your project. Linting offers a streamlined way to analyze your code for potential errors, enforce coding standards and best practices, and improves the overall code quality of your project.\n',
      },
    },
  },
};
