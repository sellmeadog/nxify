// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ArticleMarkdown should render successfully 1`] = `
<body>
  <div>
    <section
      class="odd:bg-neutral-700 max-w-none"
    >
      <div
        class="max-w-prose mx-auto p-8 md:px-0 lg:py-16 undefined"
      >
        <div
          class="prose-blockquote:border-orange-400 prose-blockquote:font-serif prose-blockquote:text-neutral-400 prose-blockquote:text-xl prose-code:before:hidden prose-code:after:hidden first-of-type:prose-p:mt-0 last-of-type:prose-p:mb-0 undefined"
        >
          <p>
            I recently started an Expo project in my Nx workspace. Unlike the Expo CLI, the 
            <a
              href="https://nx.dev/packages/expo"
            >
              @nx/expo
            </a>
             plugin generates projects completely configured with ESLint and Prettier our of the box. As such, the 
            <code
              class="text-orange-300"
            >
              style
            </code>
             prop error I encountered may not be very common.
          </p>
          

          <blockquote>
            

            <p>
              If you're not familiar with Nx or how it can streamline your overall development efforts, stay tuned as I will be providing a lot more information about Nx and monorepo development strategies in future articles.
            </p>
            

          </blockquote>
          

          <p>
            The 
            <a
              href="https://docs.expo.dev/versions/latest/sdk/status-bar/"
            >
              expo-status-bar package
            </a>
             is automatically included in the app generated by Nx and I was confused when I received the following lint warning the first time I set the 
            <code
              class="text-orange-300"
            >
              style
            </code>
             prop on the 
            <code
              class="text-orange-300"
            >
              StatusBar
            </code>
            .
          </p>
          

          <pre>
            <code
              class="language-jsx"
            >
              // warn: Style prop value must be an object eslint(react/style-prop-object)
&lt;StatusBar style="light" animated /&gt;

            </code>
          </pre>
          

          <p>
            First, I'm still not sure why the Expo team deviated from the standard 
            <code
              class="text-orange-300"
            >
              barStyle
            </code>
             prop name as that would have avoided the linting error altogether. Thankfully, for anyone who has encountered this lint error, the 
            <a
              href="https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/style-prop-object.md"
            >
              react/style-prop-object
            </a>
             rule offers a convenient 
            <code
              class="text-orange-300"
            >
              allow
            </code>
             option that clears the warning:
          </p>
          

          <pre>
            <code
              class="language-json"
            >
              "react/style-prop-object": [
  "warn",
  {
    "allow": ["StatusBar"]
  }
]

            </code>
          </pre>
          

          <p>
            I added this override to the 
            <code
              class="text-orange-300"
            >
              .eslintrc.json
            </code>
             at the root of my Nx workspace although you could choose to configure only the specific projects that require it. My (almost) complete configuration looks like this:
          </p>
          

          <pre>
            <code
              class="language-json"
            >
              {
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nx"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        ...
        "react/style-prop-object": [
          "warn",
          {
            "allow": ["StatusBar"]
          }
        ]
      }
    },
    ...
  ]
}

            </code>
          </pre>
          

          <p>
            If you're not using Nx, your ESLint configuration may look a little different although the same concept should apply. If you're not using a linter, you should consider taking the time to configure ESLint or similar in your project. Linting offers a streamlined way to analyze your code for potential errors, enforce coding standards and best practices, and improves the overall code quality of your project.
          </p>
        </div>
      </div>
    </section>
  </div>
</body>
`;
